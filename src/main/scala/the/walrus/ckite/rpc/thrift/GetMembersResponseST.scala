/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 */
package the.walrus.ckite.rpc.thrift

import com.twitter.scrooge.{
  ThriftException, ThriftStruct, ThriftStructCodec3}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object GetMembersResponseST extends ThriftStructCodec3[GetMembersResponseST] {
  val Struct = new TStruct("GetMembersResponseST")
  val SuccessField = new TField("success", TType.BOOL, 1)
  val SuccessFieldManifest = implicitly[Manifest[Boolean]]
  val MembersField = new TField("members", TType.LIST, 2)
  val MembersFieldManifest = implicitly[Manifest[Seq[String]]]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: GetMembersResponseST) {
    if (_item.members == null) throw new TProtocolException("Required field members cannot be null")
  }

  override def encode(_item: GetMembersResponseST, _oproto: TProtocol) { _item.write(_oproto) }
  override def decode(_iprot: TProtocol): GetMembersResponseST = Immutable.decode(_iprot)

  def apply(
    success: Boolean,
    members: Seq[String] = Seq[String]()
  ): GetMembersResponseST = new Immutable(
    success,
    members
  )

  def unapply(_item: GetMembersResponseST): Option[Product2[Boolean, Seq[String]]] = Some(_item)

  object Immutable extends ThriftStructCodec3[GetMembersResponseST] {
    override def encode(_item: GetMembersResponseST, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): GetMembersResponseST = {
      var success: Boolean = false
      var _got_success = false
      var members: Seq[String] = Seq[String]()
      var _got_members = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* success */
              _field.`type` match {
                case TType.BOOL => {
                  success = {
                    _iprot.readBool()
                  }
                  _got_success = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 2 => { /* members */
              _field.`type` match {
                case TType.LIST => {
                  members = {
                    val _list = _iprot.readListBegin()
                    if (_list.size == 0) {
                      _iprot.readListEnd()
                      Nil
                    } else {
                      val _rv = new mutable$ArrayBuffer[String](_list.size)
                      var _i = 0
                      while (_i < _list.size) {
                        _rv += {
                            _iprot.readString()
  
                        }
                        _i += 1
                      }
                      _iprot.readListEnd()
                      _rv
                    }
                  }
                  _got_members = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ =>
              TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      if (!_got_success) throw new TProtocolException("Required field 'GetMembersResponseST' was not found in serialized data for struct GetMembersResponseST")
      if (!_got_members) throw new TProtocolException("Required field 'GetMembersResponseST' was not found in serialized data for struct GetMembersResponseST")
      new Immutable(
        success,
        members
      )
    }
  }

  /**
   * The default read-only implementation of GetMembersResponseST.  You typically should not need to
   * directly reference this class; instead, use the GetMembersResponseST.apply method to construct
   * new instances.
   */
  class Immutable(
    val success: Boolean,
    val members: Seq[String] = Seq[String]()
  ) extends GetMembersResponseST

  /**
   * This Proxy trait allows you to extend the GetMembersResponseST trait with additional state or
   * behavior and implement the read-only methods from GetMembersResponseST using an underlying
   * instance.
   */
  trait Proxy extends GetMembersResponseST {
    protected def _underlying_GetMembersResponseST: GetMembersResponseST
    override def success: Boolean = _underlying_GetMembersResponseST.success
    override def members: Seq[String] = _underlying_GetMembersResponseST.members
  }
}

trait GetMembersResponseST extends ThriftStruct
  with Product2[Boolean, Seq[String]]
  with java.io.Serializable
{
  import GetMembersResponseST._


  def success: Boolean
  def members: Seq[String]

  def _1 = success
  def _2 = members


  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): GetMembersResponseST =
    _fieldId match {
      case 1 => copy(success = false)
      case 2 => copy(members = Seq[String]())
      case _ => this
    }

  override def write(_oprot: TProtocol) {
    GetMembersResponseST.validate(this)
    _oprot.writeStructBegin(Struct)
    if (true) {
      val success_item = success
      _oprot.writeFieldBegin(SuccessField)
      _oprot.writeBool(success_item)
      _oprot.writeFieldEnd()
    }
    if (members ne null) {
      val members_item = members
      _oprot.writeFieldBegin(MembersField)
      _oprot.writeListBegin(new TList(TType.STRING, members_item.size))
      members_item.foreach { members_item_element =>
        _oprot.writeString(members_item_element)
      }
      _oprot.writeListEnd()
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    success: Boolean = this.success, 
    members: Seq[String] = this.members
  ): GetMembersResponseST =
    new Immutable(
      success,
      members
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[GetMembersResponseST]

  override def equals(other: Any): Boolean =
    _root_.scala.runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 2

  override def productElement(n: Int): Any = n match {
    case 0 => success
    case 1 => members
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "GetMembersResponseST"
}