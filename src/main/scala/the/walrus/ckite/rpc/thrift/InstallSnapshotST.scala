/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 */
package the.walrus.ckite.rpc.thrift

import com.twitter.scrooge.{
  ThriftException, ThriftStruct, ThriftStructCodec3}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object InstallSnapshotST extends ThriftStructCodec3[InstallSnapshotST] {
  val Struct = new TStruct("InstallSnapshotST")
  val StateMachineStateField = new TField("stateMachineState", TType.STRING, 1)
  val StateMachineStateFieldManifest = implicitly[Manifest[ByteBuffer]]
  val LastLogEntryIndexField = new TField("lastLogEntryIndex", TType.I32, 2)
  val LastLogEntryIndexFieldManifest = implicitly[Manifest[Int]]
  val LastLogEntryTermField = new TField("lastLogEntryTerm", TType.I32, 3)
  val LastLogEntryTermFieldManifest = implicitly[Manifest[Int]]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: InstallSnapshotST) {
    if (_item.stateMachineState == null) throw new TProtocolException("Required field stateMachineState cannot be null")
  }

  override def encode(_item: InstallSnapshotST, _oproto: TProtocol) { _item.write(_oproto) }
  override def decode(_iprot: TProtocol): InstallSnapshotST = Immutable.decode(_iprot)

  def apply(
    stateMachineState: ByteBuffer,
    lastLogEntryIndex: Int,
    lastLogEntryTerm: Int
  ): InstallSnapshotST = new Immutable(
    stateMachineState,
    lastLogEntryIndex,
    lastLogEntryTerm
  )

  def unapply(_item: InstallSnapshotST): Option[Product3[ByteBuffer, Int, Int]] = Some(_item)

  object Immutable extends ThriftStructCodec3[InstallSnapshotST] {
    override def encode(_item: InstallSnapshotST, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): InstallSnapshotST = {
      var stateMachineState: ByteBuffer = null
      var _got_stateMachineState = false
      var lastLogEntryIndex: Int = 0
      var _got_lastLogEntryIndex = false
      var lastLogEntryTerm: Int = 0
      var _got_lastLogEntryTerm = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* stateMachineState */
              _field.`type` match {
                case TType.STRING => {
                  stateMachineState = {
                    _iprot.readBinary()
                  }
                  _got_stateMachineState = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 2 => { /* lastLogEntryIndex */
              _field.`type` match {
                case TType.I32 => {
                  lastLogEntryIndex = {
                    _iprot.readI32()
                  }
                  _got_lastLogEntryIndex = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 3 => { /* lastLogEntryTerm */
              _field.`type` match {
                case TType.I32 => {
                  lastLogEntryTerm = {
                    _iprot.readI32()
                  }
                  _got_lastLogEntryTerm = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ =>
              TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      if (!_got_stateMachineState) throw new TProtocolException("Required field 'InstallSnapshotST' was not found in serialized data for struct InstallSnapshotST")
      if (!_got_lastLogEntryIndex) throw new TProtocolException("Required field 'InstallSnapshotST' was not found in serialized data for struct InstallSnapshotST")
      if (!_got_lastLogEntryTerm) throw new TProtocolException("Required field 'InstallSnapshotST' was not found in serialized data for struct InstallSnapshotST")
      new Immutable(
        stateMachineState,
        lastLogEntryIndex,
        lastLogEntryTerm
      )
    }
  }

  /**
   * The default read-only implementation of InstallSnapshotST.  You typically should not need to
   * directly reference this class; instead, use the InstallSnapshotST.apply method to construct
   * new instances.
   */
  class Immutable(
    val stateMachineState: ByteBuffer,
    val lastLogEntryIndex: Int,
    val lastLogEntryTerm: Int
  ) extends InstallSnapshotST

  /**
   * This Proxy trait allows you to extend the InstallSnapshotST trait with additional state or
   * behavior and implement the read-only methods from InstallSnapshotST using an underlying
   * instance.
   */
  trait Proxy extends InstallSnapshotST {
    protected def _underlying_InstallSnapshotST: InstallSnapshotST
    override def stateMachineState: ByteBuffer = _underlying_InstallSnapshotST.stateMachineState
    override def lastLogEntryIndex: Int = _underlying_InstallSnapshotST.lastLogEntryIndex
    override def lastLogEntryTerm: Int = _underlying_InstallSnapshotST.lastLogEntryTerm
  }
}

trait InstallSnapshotST extends ThriftStruct
  with Product3[ByteBuffer, Int, Int]
  with java.io.Serializable
{
  import InstallSnapshotST._


  def stateMachineState: ByteBuffer
  def lastLogEntryIndex: Int
  def lastLogEntryTerm: Int

  def _1 = stateMachineState
  def _2 = lastLogEntryIndex
  def _3 = lastLogEntryTerm


  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): InstallSnapshotST =
    _fieldId match {
      case 1 => copy(stateMachineState = null)
      case 2 => copy(lastLogEntryIndex = 0)
      case 3 => copy(lastLogEntryTerm = 0)
      case _ => this
    }

  override def write(_oprot: TProtocol) {
    InstallSnapshotST.validate(this)
    _oprot.writeStructBegin(Struct)
    if (stateMachineState ne null) {
      val stateMachineState_item = stateMachineState
      _oprot.writeFieldBegin(StateMachineStateField)
      _oprot.writeBinary(stateMachineState_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val lastLogEntryIndex_item = lastLogEntryIndex
      _oprot.writeFieldBegin(LastLogEntryIndexField)
      _oprot.writeI32(lastLogEntryIndex_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val lastLogEntryTerm_item = lastLogEntryTerm
      _oprot.writeFieldBegin(LastLogEntryTermField)
      _oprot.writeI32(lastLogEntryTerm_item)
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    stateMachineState: ByteBuffer = this.stateMachineState, 
    lastLogEntryIndex: Int = this.lastLogEntryIndex, 
    lastLogEntryTerm: Int = this.lastLogEntryTerm
  ): InstallSnapshotST =
    new Immutable(
      stateMachineState,
      lastLogEntryIndex,
      lastLogEntryTerm
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[InstallSnapshotST]

  override def equals(other: Any): Boolean =
    _root_.scala.runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 3

  override def productElement(n: Int): Any = n match {
    case 0 => stateMachineState
    case 1 => lastLogEntryIndex
    case 2 => lastLogEntryTerm
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "InstallSnapshotST"
}