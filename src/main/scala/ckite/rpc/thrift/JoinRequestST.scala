/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 */
package ckite.rpc.thrift

import com.twitter.scrooge.{
  ThriftException, ThriftStruct, ThriftStructCodec3}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object JoinRequestST extends ThriftStructCodec3[JoinRequestST] {
  val Struct = new TStruct("JoinRequestST")
  val MemberIdField = new TField("memberId", TType.STRING, 1)
  val MemberIdFieldManifest = implicitly[Manifest[String]]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: JoinRequestST) {
    if (_item.memberId == null) throw new TProtocolException("Required field memberId cannot be null")
  }

  override def encode(_item: JoinRequestST, _oproto: TProtocol) { _item.write(_oproto) }
  override def decode(_iprot: TProtocol): JoinRequestST = Immutable.decode(_iprot)

  def apply(
    memberId: String
  ): JoinRequestST = new Immutable(
    memberId
  )

  def unapply(_item: JoinRequestST): Option[String] = Some(_item.memberId)

  object Immutable extends ThriftStructCodec3[JoinRequestST] {
    override def encode(_item: JoinRequestST, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): JoinRequestST = {
      var memberId: String = null
      var _got_memberId = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* memberId */
              _field.`type` match {
                case TType.STRING => {
                  memberId = {
                    _iprot.readString()
                  }
                  _got_memberId = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ =>
              TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      if (!_got_memberId) throw new TProtocolException("Required field 'JoinRequestST' was not found in serialized data for struct JoinRequestST")
      new Immutable(
        memberId
      )
    }
  }

  /**
   * The default read-only implementation of JoinRequestST.  You typically should not need to
   * directly reference this class; instead, use the JoinRequestST.apply method to construct
   * new instances.
   */
  class Immutable(
    val memberId: String
  ) extends JoinRequestST

  /**
   * This Proxy trait allows you to extend the JoinRequestST trait with additional state or
   * behavior and implement the read-only methods from JoinRequestST using an underlying
   * instance.
   */
  trait Proxy extends JoinRequestST {
    protected def _underlying_JoinRequestST: JoinRequestST
    override def memberId: String = _underlying_JoinRequestST.memberId
  }
}

trait JoinRequestST extends ThriftStruct
  with Product1[String]
  with java.io.Serializable
{
  import JoinRequestST._


  def memberId: String

  def _1 = memberId


  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): JoinRequestST =
    _fieldId match {
      case 1 => copy(memberId = null)
      case _ => this
    }

  override def write(_oprot: TProtocol) {
    JoinRequestST.validate(this)
    _oprot.writeStructBegin(Struct)
    if (memberId ne null) {
      val memberId_item = memberId
      _oprot.writeFieldBegin(MemberIdField)
      _oprot.writeString(memberId_item)
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    memberId: String = this.memberId
  ): JoinRequestST =
    new Immutable(
      memberId
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[JoinRequestST]

  override def equals(other: Any): Boolean =
    _root_.scala.runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 1

  override def productElement(n: Int): Any = n match {
    case 0 => memberId
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "JoinRequestST"
}