/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 */
package ckite.rpc.thrift

import com.twitter.scrooge.{
  ThriftException, ThriftStruct, ThriftStructCodec3}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object LogEntryST extends ThriftStructCodec3[LogEntryST] {
  val Struct = new TStruct("LogEntryST")
  val TermField = new TField("term", TType.I32, 1)
  val TermFieldManifest = implicitly[Manifest[Int]]
  val IndexField = new TField("index", TType.I64, 2)
  val IndexFieldManifest = implicitly[Manifest[Long]]
  val CommandField = new TField("command", TType.STRING, 3)
  val CommandFieldManifest = implicitly[Manifest[ByteBuffer]]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: LogEntryST) {
    if (_item.command == null) throw new TProtocolException("Required field command cannot be null")
  }

  override def encode(_item: LogEntryST, _oproto: TProtocol) { _item.write(_oproto) }
  override def decode(_iprot: TProtocol): LogEntryST = Immutable.decode(_iprot)

  def apply(
    term: Int,
    index: Long,
    command: ByteBuffer
  ): LogEntryST = new Immutable(
    term,
    index,
    command
  )

  def unapply(_item: LogEntryST): Option[Product3[Int, Long, ByteBuffer]] = Some(_item)

  object Immutable extends ThriftStructCodec3[LogEntryST] {
    override def encode(_item: LogEntryST, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): LogEntryST = {
      var term: Int = 0
      var _got_term = false
      var index: Long = 0L
      var _got_index = false
      var command: ByteBuffer = null
      var _got_command = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* term */
              _field.`type` match {
                case TType.I32 => {
                  term = {
                    _iprot.readI32()
                  }
                  _got_term = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 2 => { /* index */
              _field.`type` match {
                case TType.I64 => {
                  index = {
                    _iprot.readI64()
                  }
                  _got_index = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 3 => { /* command */
              _field.`type` match {
                case TType.STRING => {
                  command = {
                    _iprot.readBinary()
                  }
                  _got_command = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ =>
              TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      if (!_got_term) throw new TProtocolException("Required field 'LogEntryST' was not found in serialized data for struct LogEntryST")
      if (!_got_index) throw new TProtocolException("Required field 'LogEntryST' was not found in serialized data for struct LogEntryST")
      if (!_got_command) throw new TProtocolException("Required field 'LogEntryST' was not found in serialized data for struct LogEntryST")
      new Immutable(
        term,
        index,
        command
      )
    }
  }

  /**
   * The default read-only implementation of LogEntryST.  You typically should not need to
   * directly reference this class; instead, use the LogEntryST.apply method to construct
   * new instances.
   */
  class Immutable(
    val term: Int,
    val index: Long,
    val command: ByteBuffer
  ) extends LogEntryST

  /**
   * This Proxy trait allows you to extend the LogEntryST trait with additional state or
   * behavior and implement the read-only methods from LogEntryST using an underlying
   * instance.
   */
  trait Proxy extends LogEntryST {
    protected def _underlying_LogEntryST: LogEntryST
    override def term: Int = _underlying_LogEntryST.term
    override def index: Long = _underlying_LogEntryST.index
    override def command: ByteBuffer = _underlying_LogEntryST.command
  }
}

trait LogEntryST extends ThriftStruct
  with Product3[Int, Long, ByteBuffer]
  with java.io.Serializable
{
  import LogEntryST._


  def term: Int
  def index: Long
  def command: ByteBuffer

  def _1 = term
  def _2 = index
  def _3 = command


  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): LogEntryST =
    _fieldId match {
      case 1 => copy(term = 0)
      case 2 => copy(index = 0L)
      case 3 => copy(command = null)
      case _ => this
    }

  override def write(_oprot: TProtocol) {
    LogEntryST.validate(this)
    _oprot.writeStructBegin(Struct)
    if (true) {
      val term_item = term
      _oprot.writeFieldBegin(TermField)
      _oprot.writeI32(term_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val index_item = index
      _oprot.writeFieldBegin(IndexField)
      _oprot.writeI64(index_item)
      _oprot.writeFieldEnd()
    }
    if (command ne null) {
      val command_item = command
      _oprot.writeFieldBegin(CommandField)
      _oprot.writeBinary(command_item)
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    term: Int = this.term, 
    index: Long = this.index, 
    command: ByteBuffer = this.command
  ): LogEntryST =
    new Immutable(
      term,
      index,
      command
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[LogEntryST]

  override def equals(other: Any): Boolean =
    _root_.scala.runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 3

  override def productElement(n: Int): Any = n match {
    case 0 => term
    case 1 => index
    case 2 => command
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "LogEntryST"
}