/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 */
package ckite.rpc.thrift

import com.twitter.scrooge.{
  ThriftException, ThriftStruct, ThriftStructCodec3}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object AppendEntriesST extends ThriftStructCodec3[AppendEntriesST] {
  val Struct = new TStruct("AppendEntriesST")
  val TermField = new TField("term", TType.I32, 1)
  val TermFieldManifest = implicitly[Manifest[Int]]
  val LeaderIdField = new TField("leaderId", TType.STRING, 2)
  val LeaderIdFieldManifest = implicitly[Manifest[String]]
  val CommitIndexField = new TField("commitIndex", TType.I32, 3)
  val CommitIndexFieldManifest = implicitly[Manifest[Int]]
  val PrevLogIndexField = new TField("prevLogIndex", TType.I32, 4)
  val PrevLogIndexFieldManifest = implicitly[Manifest[Int]]
  val PrevLogTermField = new TField("prevLogTerm", TType.I32, 5)
  val PrevLogTermFieldManifest = implicitly[Manifest[Int]]
  val EntriesField = new TField("entries", TType.LIST, 6)
  val EntriesFieldManifest = implicitly[Manifest[Seq[LogEntryST]]]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: AppendEntriesST) {
    if (_item.leaderId == null) throw new TProtocolException("Required field leaderId cannot be null")
  }

  override def encode(_item: AppendEntriesST, _oproto: TProtocol) { _item.write(_oproto) }
  override def decode(_iprot: TProtocol): AppendEntriesST = Immutable.decode(_iprot)

  def apply(
    term: Int,
    leaderId: String,
    commitIndex: Int = -1,
    prevLogIndex: Int = -1,
    prevLogTerm: Int = -1,
    entries: Option[Seq[LogEntryST]] = None
  ): AppendEntriesST = new Immutable(
    term,
    leaderId,
    commitIndex,
    prevLogIndex,
    prevLogTerm,
    entries
  )

  def unapply(_item: AppendEntriesST): Option[Product6[Int, String, Int, Int, Int, Option[Seq[LogEntryST]]]] = Some(_item)

  object Immutable extends ThriftStructCodec3[AppendEntriesST] {
    override def encode(_item: AppendEntriesST, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): AppendEntriesST = {
      var term: Int = 0
      var _got_term = false
      var leaderId: String = null
      var _got_leaderId = false
      var commitIndex: Int = -1
      var _got_commitIndex = false
      var prevLogIndex: Int = -1
      var _got_prevLogIndex = false
      var prevLogTerm: Int = -1
      var _got_prevLogTerm = false
      var entries: Seq[LogEntryST] = Seq[LogEntryST]()
      var _got_entries = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* term */
              _field.`type` match {
                case TType.I32 => {
                  term = {
                    _iprot.readI32()
                  }
                  _got_term = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 2 => { /* leaderId */
              _field.`type` match {
                case TType.STRING => {
                  leaderId = {
                    _iprot.readString()
                  }
                  _got_leaderId = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 3 => { /* commitIndex */
              _field.`type` match {
                case TType.I32 => {
                  commitIndex = {
                    _iprot.readI32()
                  }
                  _got_commitIndex = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 4 => { /* prevLogIndex */
              _field.`type` match {
                case TType.I32 => {
                  prevLogIndex = {
                    _iprot.readI32()
                  }
                  _got_prevLogIndex = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 5 => { /* prevLogTerm */
              _field.`type` match {
                case TType.I32 => {
                  prevLogTerm = {
                    _iprot.readI32()
                  }
                  _got_prevLogTerm = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 6 => { /* entries */
              _field.`type` match {
                case TType.LIST => {
                  entries = {
                    val _list = _iprot.readListBegin()
                    if (_list.size == 0) {
                      _iprot.readListEnd()
                      Nil
                    } else {
                      val _rv = new mutable$ArrayBuffer[LogEntryST](_list.size)
                      var _i = 0
                      while (_i < _list.size) {
                        _rv += {
                            LogEntryST.decode(_iprot)
  
                        }
                        _i += 1
                      }
                      _iprot.readListEnd()
                      _rv
                    }
                  }
                  _got_entries = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ =>
              TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      if (!_got_term) throw new TProtocolException("Required field 'AppendEntriesST' was not found in serialized data for struct AppendEntriesST")
      if (!_got_leaderId) throw new TProtocolException("Required field 'AppendEntriesST' was not found in serialized data for struct AppendEntriesST")
      new Immutable(
        term,
        leaderId,
        commitIndex,
        prevLogIndex,
        prevLogTerm,
        if (_got_entries) Some(entries) else None
      )
    }
  }

  /**
   * The default read-only implementation of AppendEntriesST.  You typically should not need to
   * directly reference this class; instead, use the AppendEntriesST.apply method to construct
   * new instances.
   */
  class Immutable(
    val term: Int,
    val leaderId: String,
    val commitIndex: Int = -1,
    val prevLogIndex: Int = -1,
    val prevLogTerm: Int = -1,
    val entries: Option[Seq[LogEntryST]] = None
  ) extends AppendEntriesST

  /**
   * This Proxy trait allows you to extend the AppendEntriesST trait with additional state or
   * behavior and implement the read-only methods from AppendEntriesST using an underlying
   * instance.
   */
  trait Proxy extends AppendEntriesST {
    protected def _underlying_AppendEntriesST: AppendEntriesST
    override def term: Int = _underlying_AppendEntriesST.term
    override def leaderId: String = _underlying_AppendEntriesST.leaderId
    override def commitIndex: Int = _underlying_AppendEntriesST.commitIndex
    override def prevLogIndex: Int = _underlying_AppendEntriesST.prevLogIndex
    override def prevLogTerm: Int = _underlying_AppendEntriesST.prevLogTerm
    override def entries: Option[Seq[LogEntryST]] = _underlying_AppendEntriesST.entries
  }
}

trait AppendEntriesST extends ThriftStruct
  with Product6[Int, String, Int, Int, Int, Option[Seq[LogEntryST]]]
  with java.io.Serializable
{
  import AppendEntriesST._


  def term: Int
  def leaderId: String
  def commitIndex: Int
  def prevLogIndex: Int
  def prevLogTerm: Int
  def entries: Option[Seq[LogEntryST]]

  def _1 = term
  def _2 = leaderId
  def _3 = commitIndex
  def _4 = prevLogIndex
  def _5 = prevLogTerm
  def _6 = entries


  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): AppendEntriesST =
    _fieldId match {
      case 1 => copy(term = 0)
      case 2 => copy(leaderId = null)
      case 3 => copy(commitIndex = -1)
      case 4 => copy(prevLogIndex = -1)
      case 5 => copy(prevLogTerm = -1)
      case 6 => copy(entries = None)
      case _ => this
    }

  override def write(_oprot: TProtocol) {
    AppendEntriesST.validate(this)
    _oprot.writeStructBegin(Struct)
    if (true) {
      val term_item = term
      _oprot.writeFieldBegin(TermField)
      _oprot.writeI32(term_item)
      _oprot.writeFieldEnd()
    }
    if (leaderId ne null) {
      val leaderId_item = leaderId
      _oprot.writeFieldBegin(LeaderIdField)
      _oprot.writeString(leaderId_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val commitIndex_item = commitIndex
      _oprot.writeFieldBegin(CommitIndexField)
      _oprot.writeI32(commitIndex_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val prevLogIndex_item = prevLogIndex
      _oprot.writeFieldBegin(PrevLogIndexField)
      _oprot.writeI32(prevLogIndex_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val prevLogTerm_item = prevLogTerm
      _oprot.writeFieldBegin(PrevLogTermField)
      _oprot.writeI32(prevLogTerm_item)
      _oprot.writeFieldEnd()
    }
    if (entries.isDefined) {
      val entries_item = entries.get
      _oprot.writeFieldBegin(EntriesField)
      _oprot.writeListBegin(new TList(TType.STRUCT, entries_item.size))
      entries_item.foreach { entries_item_element =>
        entries_item_element.write(_oprot)
      }
      _oprot.writeListEnd()
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    term: Int = this.term, 
    leaderId: String = this.leaderId, 
    commitIndex: Int = this.commitIndex, 
    prevLogIndex: Int = this.prevLogIndex, 
    prevLogTerm: Int = this.prevLogTerm, 
    entries: Option[Seq[LogEntryST]] = this.entries
  ): AppendEntriesST =
    new Immutable(
      term,
      leaderId,
      commitIndex,
      prevLogIndex,
      prevLogTerm,
      entries
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[AppendEntriesST]

  override def equals(other: Any): Boolean =
    _root_.scala.runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 6

  override def productElement(n: Int): Any = n match {
    case 0 => term
    case 1 => leaderId
    case 2 => commitIndex
    case 3 => prevLogIndex
    case 4 => prevLogTerm
    case 5 => entries
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "AppendEntriesST"
}